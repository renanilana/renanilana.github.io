:source-highlighter: pygments
:stem:
:stem: asciimath
:toc: left
:toc-title: Sumário

= Atividades PDI =
 Alunos: Ilana Júlia de Medeiros Barreto e Renan Saatman Maia

== 1. Considerações iniciais == 

Esta página foi criada para a exibição dos códigos realizados pelos alunos Ilna Barreto e Renan Saatman na disciplina de Processamento Digital de Imagens ministrada pelo professor Agostinho Brito durante o semestre 2018.1. Para compilar e executar os códigos aqui apresentados é necessário salvar os arquivos .cpp juntamente com o arquivo link:https://renanilana.github.io/codigos/Makefile[Makefile] em um diretório e executar a seguinte seqüência de comandos:
....
$ make <Nome_do_arquivo_cpp>
$ ./<Nome_do_arquivo_cpp>
....

== 2. Manipulando pixels em uma imagem == 

<<<<<<< HEAD
=== 2.1. regions.cpp ===
=======
=== 2.1. regions.cpp === 
>>>>>>> 0c6c4e250d955bafd567ea8d55ea1ab96de98828

O primeiro exercício consta na troca das cores de um a determinada região pelo seu correpondente negativo utilizando como referência o código link:https://renanilana.github.io/codigos/pixels.cpp[pixels.cpp]. O programa link:https://renanilana.github.io/codigos/regions.cpp[regions.cpp] inicialmente conta a quantidade de linhas e colunas da imagem utilizada e solicita ao usuário que forneça as coordenadas de dois pontos, P1 e P2, de forma a construir um retângulo que exibirá o negativo da imagem na região correspondente. Note que não é possível fornecer coordenadas de um ponto que não pertença à imagem.

[[exa_regions, Regions]]
.regions.cpp
[source,cpp]
----
include::codigos/regions.cpp[]
---- 

Abaixo encontram-se as imagens antes e depois do processamento para os pontos P1 = (100, 50) e P2 = (200, 100).

[.float-group]
--
[[fig_biel, Original]]
[.left]
.Original
image::imagens/biel.png[Original, title="Imagem Original"]
[[fig_biel_depois, Saída Regions]]
[.left]
.Saida do programa regions
image::imagens/negativo.png[Imagem processada, title="Utilizando os pontos (100,50) e (200,100)"]
--


=== 2.2. trocaregioes.cpp ===

O segundo exercício consta na troca de quadrantes de uma imagem de forma diagonal utilizando como referência o código link:https://renanilana.github.io/codigos/pixels.cpp[pixels.cpp]. O programa link:https://renanilana.github.io/codigos/trocaregioes.cpp[trocaregioes.cpp] inicialmente conta a quantidade de linhas e colunas da imagem. A partir desses valores é possível encontrar o ponto médio do plano X e Y, conseguindo assim fazer a troca do quadrante 1 com o 3 e do quadrante 2 com o 4. 

[[exa_trocaregioes, TrocaRegioes]]
.trocaregioes.cpp
[source,cpp]
----
include::codigos/trocaregioes.cpp[]
---- 

Abaixo encontram-se a imagem original e com os quatro quadrantes trocados.

[.float-group]
--
[[fig_biel, Original]]
[.left]
.Original
image::imagens/biel.png[Original, title="Imagem Original"]
[[fig_biel_depois, Saída TrocaRegioes]]
[.left]
.Saida do programa trocaregioes
image::imagens/regioestrocadas.png[Imagem processada, title="Regiões Trocadas"]
--


== 3. Rotulando objetos ==

=== 3.1 Mais de 255 objetos ===

=== 3.2 contabolhas.cpp ===

<<<<<<< HEAD
Utilizando o código link:https://renanilana.github.io/codigos/labeling.cpp[labeling.cpp] como referência foi possível implementar um código que conte quantas bolhas existem na imagem, assim como quantas possuem buracos, independente de ser um buraco ou mais por bolha. O código link:https://renanilana.github.io/codigos/cbolhas.cpp[cbolhas.cpp] deve ignorar as bolhas que estejam em contato com as bordas da imagem, pois não da para saber se elas possuem buracos ou não.
=======
Utilizando o código link:https://renanilana.github.io/codigos/labeling.cpp[labeling.cpp] como referência foi possível implementar um código que conte quantas bolhas existem na imagem, assim como quantas possuem buracos, independente de ser um buraco ou mais por bolha. O código link:https://renanilana.github.io/codigos/cbolhas.cpp[cbolhas.cpp] 
>>>>>>> 0c6c4e250d955bafd567ea8d55ea1ab96de98828

[[exa_regions, Regions]]
.contabolhas.cpp
[source,cpp]
----
include::codigos/cbolhas.cpp[]
---- 

Primeiramente a imagem é carregada, as imagens utilizadas para testes, uma com bolhas com apenas um buraco e a outra com bolhas contendo mais de um buraco, foram as seguintes:
[.float-group]
--
[[fig_bolhas, Original]]
[.left]
.Original
image::imagens/bolhas.png[Original, title="Bolhas com um buraco."]
[[fig_bolhas2, Original]]
[.left]
.Bolhas2
image::imagens/bolhas2.png[Sem borda, title="Bolhas com vários buracos.)"]
--


== 4. Manipulação de Histrogramas ==

=== 4.1. equalize.cpp

Este programa realiza, para cada imagem capturada, a equalização do histograma antes de exibir a imagem. O código link:https://renanilana.github.io/codigos/equalize.cpp[equalize.cpp] processa apenas imagens em tons de cinza. Para tal atividade, foi utilizado o código link:https://renanilana.github.io/codigos/histogram.cpp[histogram.cpp] como guia, como também uma função já inserida na biblioteca do OpenCV, chamada *equalizeHist()*. 

[[exa_equalize, Equalize]]
.equalize.cpp
[source,cpp]
----
include::codigos/equalize.cpp[]
---- 

Abaixo encontram-se a imagem original e com o efeito da equalização.

[.float-group]
--
[[fig_normal, Original]]
[.left]
.Original
image::imagens/normal.png[Original, 300, 200]
[[fig_equalizada, Equalizada]]
[.left]
.Equalizada
image::imagens/equalize.png[Imagem processada, 300, 200]
--



TESTE ILANA
