:source-highlighter: pygments
:stem:
:stem: asciimath
:toc: left
:toc-title: Sumário

= Atividades PDI =
 Alunos: Ilana Júlia de Medeiros Barreto e Renan Saatman Maia

== 1. Considerações iniciais == 

Esta página foi criada para a exibição dos códigos realizados pelos alunos Ilna Barreto e Renan Saatman na disciplina de Processamento Digital de Imagens ministrada pelo professor Agostinho Brito durante o semestre 2018.1. Para compilar e executar os códigos aqui apresentados é necessário salvar os arquivos .cpp juntamente com o arquivo link:https://renanilana.github.io/codigos/Makefile[Makefile] em um diretório e executar a seguinte seqüência de comandos:
....
$ make <Nome_do_arquivo_cpp>
$ ./<Nome_do_arquivo_cpp>
....

== 2. Manipulando pixels em uma imagem == 

=== 2.1. regions.cpp === 

O primeiro exercício consta na troca das cores de um a determinada região pelo seu correpondente negativo utilizando como referência o código link:https://renanilana.github.io/codigos/pixels.cpp[pixels.cpp]. O programa link:https://renanilana.github.io/codigos/regions.cpp[regions.cpp] inicialmente conta a quantidade de linhas e colunas da imagem utilizada e solicita ao usuário que forneça as coordenadas de dois pontos, P1 e P2, de forma a construir um retângulo que exibirá o negativo da imagem na região correspondente. Note que não é possível fornecer coordenadas de um ponto que não pertença à imagem.

[[exa_regions, Regions]]
.regions.cpp
[source,cpp]
----
include::codigos/regions.cpp[]
---- 

Abaixo encontram-se as imagens antes e depois do processamento para os pontos P1 = (100, 50) e P2 = (200, 100).

[.float-group]
--
[[fig_biel, Original]]
[.left]
.Original
image::imagens/biel.png[Original, title="Imagem Original"]
[[fig_biel_depois, Saída Regions]]
[.left]
.Saida do programa regions
image::imagens/negativo.png[Imagem processada, title="Utilizando os pontos (100,50) e (200,100)"]
--


=== 2.2. trocaregioes.cpp ===

O segundo exercício consta na troca de quadrantes de uma imagem de forma diagonal utilizando como referência o código link:https://renanilana.github.io/codigos/pixels.cpp[pixels.cpp]. O programa link:https://renanilana.github.io/codigos/trocaregioes.cpp[trocaregioes.cpp] inicialmente conta a quantidade de linhas e colunas da imagem. A partir desses valores é possível encontrar o ponto médio do plano X e Y, conseguindo assim fazer a troca do quadrante 1 com o 3 e do quadrante 2 com o 4. 

[[exa_trocaregioes, TrocaRegioes]]
.trocaregioes.cpp
[source,cpp]
----
include::codigos/trocaregioes.cpp[]
---- 

Abaixo encontram-se a imagem original e com os quatro quadrantes trocados.

[.float-group]
--
[[fig_biel, Original]]
[.left]
.Original
image::imagens/biel.png[Original, title="Imagem Original"]
[[fig_biel_depois, Saída TrocaRegioes]]
[.left]
.Saida do programa trocaregioes
image::imagens/regioestrocadas.png[Imagem processada, title="Regiões Trocadas"]
--


== 3. Rotulando objetos ==

=== 3.1 Mais de 255 objetos ===

A quantidade de cores disponível para uma dada imagem depende da quantidade de bits usados na representação de cada cor. Com a imagem atual sendo representada em 8 bits, temos 256 tons de cinza disponíveis para a rotulação. Uma solução para o problema dado poderia ser aumentar a quantidade de bits para representar cada cor.

Usando 10 bits, teria-se uma disponibilidade de 1024 tons de cinza. Usando 12 bits, teria-se 4096 tons de cinza, e assim por diante.

Outra solução para o problema também poderia ser trabalhar com a rotulação no sistema de cores RGB. Com três matrizes de cores para combinar, a quantidade diferente de rótulos também seria bem maior.

=== 3.2 contabolhas.cpp ===


Utilizando o código link:https://renanilana.github.io/codigos/labeling.cpp[labeling.cpp] como referência foi possível implementar um código que conte quantas bolhas existem na imagem, assim como quantas possuem buracos, independente de ser um buraco ou mais por bolha. O código link:https://renanilana.github.io/codigos/cbolhas.cpp[cbolhas.cpp] deve ignorar as bolhas que estejam em contato com as bordas da imagem, pois não da para saber se elas possuem buracos ou não.


[[exa_regions, Regions]]
.contabolhas.cpp
[source,cpp]
----
include::codigos/cbolhas.cpp[]
---- 

Primeiramente a imagem é carregada, as imagens utilizadas para testes, uma com bolhas contendo apenas um buraco e a outra com bolhas contendo mais de um buraco, foram as seguintes:
[.float-group]
--
[[fig_bolhas, Original]]
[.left]
.Original
image::imagens/bolhas.png[Original, title="Bolhas com um buraco."]
[[fig_bolhas2, Original]]
[.left]
.Bolhas2
image::imagens/bolhas2.png[Sem borda, title="Bolhas com vários buracos.)"]
--

Para realizar a contagem das bolhas é feita a rotulação da imagem, onde cada bolha passa a ter uma coloração diferente, possibilitando a contagem. Feito isso é alterada a cor do fundo da imagem para um tom diferente dos que já existam na figura, com isso temos a diferenciação do fundo, bolhas e buracos. Para verificar se mais de um buraco pertence a mesma bolha, e consequentemente contar a quantidade de buracos que possuem bolhas, para cada buraco encontrado a sua bolha recebe um novo tom, caso exista um outro buraco é verificado se a bolha já foi pintada, caso sim os buracos pertencem a uma mesma bolha e ela é contabilizada apenas uma vez. A sequência de imagens gerada pelo programa é a seguinte:

[.float-group]
--
[[fig_bolhasb, Original]]
[.left]
.Borda
image::imagens/semborda.png[Original, title="Bolhas retiradas das bordas."]
[[fig_bolhasc, Original]]
[.left]
.Bolhacinza
image::imagens/bolhacinza.png[Sem borda, title="Bolhas rotuladas."]
[[fig_bolhasf, Original]]
[.left]
.Bolhafinal
image::imagens/bolhafinal.png[Sem borda, title="Fundo alterado."]

--

Para as duas imagens a saída do programa é a seguinte:



== 4. Manipulação de Histogramas ==

=== 4.1. equalize.cpp

Este programa realiza, para cada imagem capturada, a equalização do histograma antes de exibir a imagem. O código link:https://renanilana.github.io/codigos/equalize.cpp[equalize.cpp] processa apenas imagens em tons de cinza. Para tal atividade, foi utilizado o código link:https://renanilana.github.io/codigos/histogram.cpp[histogram.cpp] como guia, como também uma função já inserida na biblioteca do OpenCV, chamada *equalizeHist()*. 

[[exa_equalize, Equalize]]
.equalize.cpp
[source,cpp]
----
include::codigos/equalize.cpp[]
---- 

Abaixo encontram-se a imagem original e com o efeito da equalização.

[.float-group]
--
[[fig_normal, Original]]
[.left]
.Original
image::imagens/normal.png[Original, 300, 200]
[[fig_equalizada, Equalizada]]
[.left]
.Equalizada
image::imagens/equalize.png[Imagem processada, 300, 200]

--

=== 4.2. motiondetector.cpp ===

Nesta atividade, com base no código link:https://renanilana.github.io/codigos/histogram.cpp[histogram.cpp], foi possível criar um detector de 
movimentos através do cálculo do histograma de uma imagem e em seguida a comparação com o último histograma. O código link:https://renanilana.github.io/codigos/motiondetector.cpp[motiondetector.cpp] faz a comparação dos histogramas através da função *compareHist()* da biblioteca do OpenCV. Quando a diferença entre os dois histogramas comparados ultrapassa o valor de 0.98, ele indica na própria tela que houve movimento.

[[exa_motiondetector, MotionDetector]]
.motiondetector.cpp
[source,cpp]
----
include::codigos/motiondetector.cpp[]
---- 

Abaixo é mostrado o resultado do link:https://renanilana.github.io/codigos/motiondetector.cpp[motiondetector.cpp]:

[.float-group]
--
video::imagens/motiondetector.mp4[Motion Detector, width=640, start=60, end=140, options=autoplay]

--

== 5. Filtragem no domínio espacial I ==

=== 5.1. Laplaciano do Gaussiano ===

Esse exercício constou em acrescentar mais uma funcionalidade ao exemplo link:https://renanilana.github.io/codigos/filtroespacial.cpp[filtroespacial.cpp] permitindo que seja calculado o laplaciano do gaussiano de uma imagem, comparando-o com o resultado do filtro laplaciano apenas.


[[exa_lapg, Laplgauss]]
.laplgauss.cpp
[source,cpp]
----
include::codigos/laplgauss.cpp[]
---- 

Abaixo encontram-se a imagem original, a imagem apenas com o filtro laplaciano e a imagem com o a aplicação do filtro do laplaciano do gaussiano, respectivamente. É possível observar que as bordas são bem mais evidentes no vídeo com a aplicação do efeito laplaciano do gaussiano do que com o efeito laplaciano sozinho, apesar do ruído ser maior.

[.float-group]
--
[[fig_normal, Original]]
[.left]
.Original
image::imagens/semfiltro.png[Original, 300, 200]
[[fig_lap, Filtro]]
[.left]
.Filtro laplaciano
image::imagens/filtroL.png[Imagem processada, 300, 200]
[[fig_lapg, Filtro2]]
[.left]
.Filtro laplaciano do gaussiano
image::imagens/filtroLG.png[Imagem processada, 300, 200]

--

== 6. Filtragem no domínio espacial II ==

=== 6.1. Tilt-shift para imagens ===

Nessa atividade, foi implementado o programa link:https://renanilana.github.io/codigos/tiltshift.cpp[tiltshift.cpp] com base no link:https://renanilana.github.io/codigos/addweighted.cpp[addweighted.cpp]. O programa permite 3 tipos de ajustes na imagem a ser editada: 

* um ajuste para regular a altura da região central que entrará em foco;
* um ajuste para regular a força de decaimento da região borrada;
* um ajuste para regular a posição vertical do centro da região que entrará em foco.

Quando o código é finalizado, a imagem produzida é salva em um arquivo de nome _tiltshift.png_.

[[exa_ts, TiltShift]]
.tiltshift.cpp
[source,cpp]
----
include::codigos/tiltshift.cpp[]
---- 

Abaixo, a imagem original utilizada:

[.float-group]
--
[[fig_normal, Original]]
[.left]
.Original
image::imagens/aero.jpg[Original, 640, 480]
--

E o resultado da aplicação:
[.float-group]
--
[[fig_ts, TiltShift]]
[.left]
.Tilt-shift
image::imagens/tiltshift.png[Tilt-Shift]
--
